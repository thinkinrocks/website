---
import "@fontsource-variable/space-grotesk";
import "@fontsource-variable/alkatra";
import "@fontsource-variable/handjet";
import "../styles/global.css";
import "../styles/fonts.css";
import Analytics from "@vercel/analytics/astro";
import Navbar from "../components/Navbar.astro";

export interface Props {
  hideNavbar?: boolean;
}

const { hideNavbar = false } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Font preloading for better caching and performance -->
    <link 
      rel="preload" 
      href="/fonts/departure-mono/DepartureMono-Regular.woff2" 
      as="font" 
      type="font/woff2" 
      crossorigin="anonymous"
    />
    
    <title>Thinkin' Rocks</title>
    <Analytics />
    <style>
      /* Critical CSS - loaded immediately to prevent FOUC */
      
      /* Reset and base styles */
      * {
        box-sizing: border-box;
      }
      
      body {
        margin: 0;
        padding: 0;
        line-height: 1.5;
        color: #1f2937;
        background: #ffffff;
        font-family: "Space Grotesk Variable", ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
        opacity: 0;
        transition: opacity 0.4s ease-out;
      }
      
      body.loaded {
        opacity: 1;
      }
      
      /* Critical font classes */
      .font-sans {
        font-family: "Space Grotesk Variable", ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
      }
      
      .font-mono {
        font-family: "Departure Mono", ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      }
      
      .font-display {
        font-family: "Alkatra Variable", ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
      }
      
      .font-logo {
        font-family: "Handjet Variable", ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
      }
      
      /* Critical layout classes */
      .relative { position: relative; }
      .fixed { position: fixed; }
      .z-40 { z-index: 40; }
      .z-10 { z-index: 10; }
      .z-20 { z-index: 20; }
      .flex { display: flex; }
      .flex-col { flex-direction: column; }
      .items-center { align-items: center; }
      .justify-center { justify-content: center; }
      .justify-start { justify-content: flex-start; }
      .text-center { text-align: center; }
      .mx-auto { margin-left: auto; margin-right: auto; }
      .mb-4 { margin-bottom: 1rem; }
      .mb-8 { margin-bottom: 2rem; }
      .pt-20 { padding-top: 5rem; }
      .px-4 { padding-left: 1rem; padding-right: 1rem; }
      .py-16 { padding-top: 4rem; padding-bottom: 4rem; }
      .max-w-4xl { max-width: 56rem; }
      .w-full { width: 100%; }
      .h-12 { height: 3rem; }
      
      /* Critical text styles */
      .text-6xl { font-size: 3.75rem; line-height: 1; }
      .text-2xl { font-size: 1.5rem; line-height: 2rem; }
      .text-lg { font-size: 1.125rem; line-height: 1.75rem; }
      .text-base { font-size: 1rem; line-height: 1.5rem; }
      .text-xs { font-size: 0.75rem; line-height: 1rem; }
      .text-xl { font-size: 1.25rem; line-height: 1.75rem; }
      
      /* Critical colors */
      .text-indigo-800 { color: #3730a3; }
      .text-indigo-600 { color: #4f46e5; }
      .text-indigo-500 { color: #6366f1; }
      .text-gray-700 { color: #374151; }
      .text-gray-600 { color: #4b5563; }
      .text-gray-900 { color: #111827; }
      .bg-white { background-color: #ffffff; }
      
      /* Smooth content reveal animations */
      .fade-in {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.6s ease-out, transform 0.6s ease-out;
      }
      
      .fade-in.visible {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Staggered animation delays */
      .fade-in:nth-child(1) { transition-delay: 0.1s; }
      .fade-in:nth-child(2) { transition-delay: 0.2s; }
      .fade-in:nth-child(3) { transition-delay: 0.3s; }
      .fade-in:nth-child(4) { transition-delay: 0.4s; }
      .fade-in:nth-child(5) { transition-delay: 0.5s; }
      
      /* Smooth navigation transitions */
      .nav-item {
        transition: color 0.2s ease, opacity 0.2s ease;
      }
      
      .nav-item:hover {
        color: #4f46e5;
      }
      
      /* Links */
      a {
        text-decoration: inherit;
        color: inherit;
      }
      
      .underline {
        text-decoration: underline;
      }
      
      /* Responsive */
      @media (min-width: 768px) {
        .md\\:text-8xl { font-size: 6rem; line-height: 1; }
        .md\\:text-2xl { font-size: 1.5rem; line-height: 2rem; }
        .md\\:text-xl { font-size: 1.25rem; line-height: 1.75rem; }
        .md\\:px-16 { padding-left: 4rem; padding-right: 4rem; }
        .md\\:pt-40 { padding-top: 10rem; }
      }
    </style>
  </head>
  <body>
    
    {!hideNavbar && <Navbar />}
    <slot />
    
    <script>
      // Smooth page loading system
      function initSmoothLoading() {
        // Show page with smooth fade-in
        document.body.classList.add('loaded');
        
        // Set up intersection observer for content animations
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('visible');
              observer.unobserve(entry.target);
            }
          });
        }, observerOptions);
        
        // Observe all fade-in elements
        document.querySelectorAll('.fade-in').forEach(el => {
          observer.observe(el);
        });
        
        // Handle image loading
        const images = document.querySelectorAll('img[loading="lazy"]');
        images.forEach(img => {
          const imageEl = img as HTMLImageElement;
          imageEl.addEventListener('load', () => {
            imageEl.classList.add('loaded');
          });
          
          // If image is already loaded (from cache)
          if (imageEl.complete) {
            imageEl.classList.add('loaded');
          }
        });
        
        // Basic hydration support
        const pendingElements = document.querySelectorAll('.hydration-pending');
        pendingElements.forEach(el => {
          el.classList.remove('hydration-pending');
          el.classList.add('hydration-ready');
        });
      }
      
      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initSmoothLoading);
      } else {
        initSmoothLoading();
      }
      
      // Smooth page transitions on navigation
      window.addEventListener('beforeunload', () => {
        document.body.style.opacity = '0';
      });
    </script>
  </body>
</html>
