---
import "@fontsource-variable/space-grotesk";
import "@fontsource-variable/geist-mono";
import "@fontsource-variable/alkatra";
import "@fontsource-variable/handjet";
import "@fontsource-variable/monda";
import handjet from "@fontsource-variable/handjet/files/handjet-latin-wght-normal.woff2?url";
import "../styles/global.css";
import "../styles/fonts.css";
import Analytics from "@vercel/analytics/astro";
import Navbar from "../components/Navbar.astro";

export interface Props {
  hideNavbar?: boolean;
}

const { hideNavbar = false } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href={handjet}
      crossorigin="anonymous"
    />
    <!-- Preload critical fonts -->
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href="/fonts/departure-mono/DepartureMono-Regular.woff2"
      crossorigin="anonymous"
    />
    <!-- Preconnect to external font CDNs for faster loading -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <title>Thinkin' Rocks</title>
    <Analytics />
    <style>
      /* Critical CSS: Define fonts with careful fallback matching */
      :root {
        /* Match system fonts that closely resemble custom fonts */
        --font-sans-fallback: ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
        /* Use a monospace font that closely matches Departure Mono's metrics */
        --font-mono-fallback: "SF Mono", "Monaco", "Inconsolata", "Roboto Mono", "Source Code Pro", Menlo, monospace;
      }
      
      /* Prevent font swapping completely */
      body {
        visibility: hidden;
      }
      
      /* Show with fallback fonts immediately */
      body.fonts-ready {
        visibility: visible;
        font-family: var(--font-sans-fallback);
      }
      
      /* Font-specific classes with better matching fallbacks */
      .font-sans {
        font-family: var(--font-sans-fallback);
      }
      
      /* Use more conservative approach for mono - only load if cached */
      .font-mono {
        font-family: var(--font-mono-fallback);
        /* Add slight letter spacing to better match Departure Mono */
        letter-spacing: 0.015em;
      }
      
      /* Only apply custom fonts if they loaded instantly */
      .instant-fonts-loaded .font-sans {
        font-family: var(--font-sans);
      }
      
      /* For mono, be extra conservative - only if font was cached */
      .mono-font-cached .font-mono {
        font-family: var(--font-mono);
        letter-spacing: normal;
      }
      
      /* Skeleton loading styles */
      .skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
        border-radius: 4px;
      }
      
      @keyframes loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
      
      /* Hide elements until React components are ready */
      .hydration-pending {
        opacity: 0;
        transition: opacity 0.3s ease;
      }
      
      .hydration-ready {
        opacity: 1;
      }
      
      /* Progressive content loading */
      .lazy-load {
        transition: opacity 0.7s ease;
      }
    </style>
  </head>
  <body>
    
    {!hideNavbar && <Navbar />}
    <slot />
    
    <script>
      // Immediate fallback font display to prevent blank page
      function showFallbackFonts() {
        document.body.classList.add('fonts-ready');
      }
      
      // Ultra-conservative font loading to prevent any visible changes
      function loadCustomFonts() {
        if ('fonts' in document) {
          // Check if fonts are already available (cached from previous visits)
          const spaceGroteskCached = document.fonts.check('400 16px "Space Grotesk Variable"');
          const departureMonoCached = document.fonts.check('400 16px "Departure Mono"');
          
          // For sans-serif, try a quick load
          if (spaceGroteskCached) {
            document.body.classList.add('instant-fonts-loaded');
          } else {
            // Try to load Space Grotesk with very short timeout
            Promise.race([
              document.fonts.load('400 16px "Space Grotesk Variable"'),
              new Promise(resolve => setTimeout(resolve, 50))
            ]).then(() => {
              if (document.fonts.check('400 16px "Space Grotesk Variable"')) {
                document.body.classList.add('instant-fonts-loaded');
              }
            }).catch(() => {
              // Stay with fallback fonts
            });
          }
          
          // For monospace, ONLY use if already cached (no loading attempts)
          if (departureMonoCached) {
            document.body.classList.add('mono-font-cached');
          }
          // If not cached, permanently stay with fallback mono fonts
        }
      }
      
      // Show content immediately, then try to load custom fonts
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          showFallbackFonts();
          // Small delay to let page render with fallbacks first
          setTimeout(loadCustomFonts, 50);
        });
      } else {
        showFallbackFonts();
        setTimeout(loadCustomFonts, 50);
      }
      
      // Mark hydration as ready for React components
      document.addEventListener('DOMContentLoaded', () => {
        const pendingElements = document.querySelectorAll('.hydration-pending');
        pendingElements.forEach(el => {
          el.classList.remove('hydration-pending');
          el.classList.add('hydration-ready');
        });
        
        // Progressive content loading with intersection observer
        const lazyElements = document.querySelectorAll('.lazy-load');
        
        if ('IntersectionObserver' in window) {
          const lazyObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add('opacity-100');
                entry.target.classList.remove('opacity-0');
                lazyObserver.unobserve(entry.target);
              }
            });
          }, { 
            rootMargin: '50px 0px',
            threshold: 0.1 
          });
          
          lazyElements.forEach(el => {
            el.classList.add('opacity-0', 'transition-opacity', 'duration-700');
            lazyObserver.observe(el);
          });
        } else {
          // Fallback for browsers without intersection observer
          lazyElements.forEach(el => {
            el.classList.add('opacity-100');
          });
        }
      });
      
      // Preload next page resources on hover
      window.addEventListener('load', () => {
        const links = document.querySelectorAll('a[href^="/"]');
        links.forEach(link => {
          link.addEventListener('mouseenter', () => {
            const url = link.getAttribute('href');
            if (url && !document.querySelector(`link[rel="prefetch"][href="${url}"]`)) {
              const prefetchLink = document.createElement('link');
              prefetchLink.rel = 'prefetch';
              prefetchLink.href = url;
              document.head.appendChild(prefetchLink);
            }
          });
        });
      });
    </script>
  </body>
</html>
